package chapter15.stream.serialization;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

// 객체 직렬화 역직렬화
// 객체(인스턴스) 상태를 파일로 저장, 네트워크 전송시 사용하는 기술.
// 직렬화로 사용하는 객체의 클래스는 Serializable 인터페이스를 구현해야 한다.
// 직렬화된 
class Person implements Serializable{
	private static final long serialVersionUID = 1;
	
	String name;
	transient String job; // 직렬화 대상에서 제외.
	
	public Person() {
		
	}
	
	public Person(String name, String job) {
		this.name = name;
		this.job = job;
	}
	
	public String toString() {
		return name + "," + job;
	}
}

public class SerializationTest {

	public static void main(String[] args) {
		// 직렬화로 사용할 객체 생성
		Person personHong = new Person("홍길동", "의적");
		Person personSon = new Person("손흥민", "축구선수");
		
		try (
				FileOutputStream fos = new FileOutputStream("serial.out");
				ObjectOutputStream oos = new ObjectOutputStream(fos);
			){
				// 객체 상태를 serial.out 파일에 저장, 값을 파일에 저장하여 직렬화.
				oos.writeObject(personSon); 
				oos.writeObject(personHong);
		}catch(IOException e) {
			e.printStackTrace();
		}
		
		// 역직렬화로 사용할 객체 생성
		try(
				FileInputStream fis = new FileInputStream("serial.out");
				ObjectInputStream ois = new ObjectInputStream(fis);
		){
			// 파일에 personHong, personSon값을 읽어들임
			Person p1 = (Person)ois.readObject(); //personHong
			Person p2 = (Person)ois.readObject(); //personSon

			System.out.println(p1);
			System.out.println(p2);
		}catch(IOException e) {
			e.printStackTrace();
		}
	}

}
